import datetime
import os
import pandas as pd
import numpy as np
import geopandas as gpd
from shapely.geometry import Polygon as shapelyPolygon
from shapely.geometry import Point, MultiPolygon
from shapely.ops import unary_union


def load_sim_data(block, parent_filepath):
    # Ensure proper formatting
    if parent_filepath[-1] != "/":
        parent_filepath += "/"
    if not os.path.exists(f"{parent_filepath}{block}/Object_Data.csv"):
        raise FileNotFoundError(f"{parent_filepath}{block}/Object_Data.csv doesn't exist.")
    # Load object data
    object_data = pd.read_csv(f"{parent_filepath}{block}/Object_Data.csv")
    object_data = object_data[['Analysis Region', 'Algorithm Name', 'Object Id', 'XMin', 'XMax', 'YMin', 'YMax', 'CD8']]
    object_data = object_data[(object_data["Analysis Region"] == "Partition Zone") & (object_data["CD8"] == 1)]
    cell_coords = []
    for idx, row in object_data.iterrows():
        cell_coord = ((row["XMin"] + row["XMax"]) / 2, (row["YMin"] + row["YMax"]) / 2)
        cell_coords.append(cell_coord)
    object_data["Cell Centre"] = cell_coords
    object_data = object_data.drop(['XMin', 'XMax', 'YMin', 'YMax'], axis=1)
    # Load annotation vertices (individual lines of file)
    if not os.path.exists(f"{parent_filepath}{block}/Annotations.annotations"):
        raise FileNotFoundError(f"{parent_filepath}{block}/Annotations.annotations doesn't exist.")
    with open(f"{parent_filepath}{block}/Annotations.annotations", "r") as f:
        lines = f.readlines()
    # Convert vertices to polygon
    positive_region = []
    layers = []
    polygons = []
    vertices = []
    layer_name = []
    region_status = []
    for line in lines:
        if "<Annotation Name=" in line:
            # Start a new polygon
            layer_name = line.split('Name="')[1].split('" Visible=')[0]
        elif "<Region Type=" in line:
            region_status = line.split('NegativeROA="')[1].split('">')[0] == '0'
            vertices = []
        elif "<V X=" in line:
            # Extract the x,y coords from the line
            x = int(line.split('X="')[1].split('" Y=')[0])
            y = int(line.split('Y="')[1].split('" />')[0])
            vertices.append((x, y))
        elif "</Region>" in line:
            # End current polygon and add it to the list
            if len(vertices) >= 4:
                polygons.append(shapelyPolygon(vertices))
                layers.append(layer_name)
                positive_region.append(region_status)
            else:
                print(f"Small annotation detected for {block}, excluding annotation with {len(vertices)} vertices: {vertices}.")
    # create polygon dataframe to keep track of individual layers on regions
    annotation_layers = pd.DataFrame({"Layer": layers, "Positive Region": positive_region, "Polygon": polygons, "Area": [shapelyPolygon(i).area for i in polygons]})
    annotation_layers = annotation_layers[annotation_layers["Layer"].isin(["Tumour", "Peritumoral Zone", "Partition Zone"])]
    annotation_layers = annotation_layers.sort_values(["Layer", "Positive Region", "Area"], ascending=[False, False, False])
    # Compile relevant annotation layers
    plot_annotations = annotation_layers[((annotation_layers["Layer"] == "Partition Zone") & (annotation_layers["Positive Region"] == 0)) | ((annotation_layers["Layer"] == "Tumour") & (annotation_layers["Positive Region"] == 1))]
    return object_data, plot_annotations
